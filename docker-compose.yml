version: "3.9"

services:
  db:
    image: postgres:16
    container_name: incidents_db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "incidents_db"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init:/docker-entrypoint-initdb.d
    networks:
      - incidents_net
    restart: unless-stopped

  api:
    container_name: incidents_api
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=incidents_db
    depends_on:
      - db
    networks:
      - incidents_net
    profiles:
      - prod
    build:
      context: ./api
      dockerfile: Dockerfile

  api-dev:
    container_name: incidents_api_dev
    volumes:
      - ./api:/app
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=incidents_db
    command: bun --hot run src/index.ts
    depends_on:
      - db
    networks:
      - incidents_net
    profiles:
      - dev
    build:
      context: ./api
      dockerfile: Dockerfile.dev

  client:
    container_name: incidents_client
    ports:
      - "8080:80"
    depends_on:
      - api
    networks:
      - incidents_net
    profiles:
      - prod
    build:
      context: ./client
      dockerfile: Dockerfile

  client-dev:
    container_name: incidents_client_dev
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "8080:8080"
    command: npm run dev
    environment:
      - API_URL=http://localhost:3000
    depends_on:
      - api-dev
    networks:
      - incidents_net
    profiles:
      - dev
    build:
      context: ./client
      dockerfile: Dockerfile.dev

volumes:
  postgres_data:

networks:
  incidents_net:
    driver: bridge
